from datetime import UTC, datetime, timedelta, timezone

import pytest
import pytz

from src.utils import (
    date_to_lang,
    from_utc,
    to_utc,
    validate_service_duration,
    validate_service_price,
)


@pytest.mark.parametrize(
    "year,month,day,expected_result",
    [
        (2020, None, None, "2020 год"),
        (2020, 6, None, "Июнь 2020 года"),
        (2020, 6, 20, "20 июня 2020 года"),
        (2020, 3, 20, "20 марта 2020 года"),
    ],
)
def test_date_to_lang(year, month, day, expected_result):
    assert date_to_lang(year, month, day) == expected_result


@pytest.mark.parametrize(
    "datetime_,dest_tz,expected_result",
    [
        (
            datetime(2025, 4, 12, 15, 0, tzinfo=UTC),
            pytz.timezone("Europe/Moscow"),
            datetime(2025, 4, 12, 18, 0, tzinfo=timezone(timedelta(hours=3))),
        ),
        (
            datetime(2025, 4, 12, 15, 0, tzinfo=UTC),
            pytz.timezone("Europe/London"),
            datetime(2025, 4, 12, 16, 0, tzinfo=timezone(timedelta(hours=1))),
        ),
        (
            datetime(2025, 4, 12, 15, 0, tzinfo=UTC),
            pytz.timezone("America/New_York"),
            datetime(2025, 4, 12, 8, 0, tzinfo=timezone(timedelta(hours=-7))),
        ),
        (
            datetime(2025, 4, 12, 15, 0),
            pytz.timezone("Europe/Moscow"),
            datetime(2025, 4, 12, 18, 0, tzinfo=timezone(timedelta(hours=3))),
        ),
    ],
)
def test_from_utc(datetime_, dest_tz, expected_result):
    assert from_utc(datetime_, dest_tz) == expected_result


@pytest.mark.parametrize(
    "datetime_,expected_result",
    [
        (
            datetime(2025, 4, 12, 18, 0, tzinfo=timezone(timedelta(hours=3))),
            datetime(2025, 4, 12, 15, 0, tzinfo=UTC),
        ),
        (
            pytz.timezone("Europe/Moscow").localize(datetime(2025, 4, 12, 18, 0)),
            datetime(2025, 4, 12, 15, 0, tzinfo=UTC),
        ),
        (
            datetime(2025, 4, 12, 16, 0, tzinfo=timezone(timedelta(hours=1))),
            datetime(2025, 4, 12, 15, 0, tzinfo=UTC),
        ),
        (
            datetime(2025, 4, 12, 8, 0, tzinfo=timezone(timedelta(hours=-7))),
            datetime(2025, 4, 12, 15, 0, tzinfo=UTC),
        ),
        (
            datetime(2026, 9, 11, 0, 0, tzinfo=timezone(timedelta(hours=3))),
            datetime(2026, 9, 10, 21, 0, tzinfo=UTC),
        ),
    ],
)
def test_to_utc(datetime_, expected_result):
    assert to_utc(datetime_) == expected_result



DURATION_SHOULD_BE_INTEGER = "Длительность должна быть целым числом"
DURATION_SHOULD_BE_GT_0 = "Длительность должна быть больше 0"
DURATION_SHOULD_BE_LTE_MAX_DURATION = "Длительность должна быть менее 1000 минут"
DURATION_SHOULD_BE_A_MULTIPLE_OF_N = "Длительность должна быть кратна 30"
WRONG_FORMAT = "Неверный формат записи числа"


@pytest.mark.parametrize(
    "user_input,expected_result",
    [
        ("30", 30),
        ("120", 120),
        ("    30    ", 30),
        ("\t    120\n", 120),
        ("0", DURATION_SHOULD_BE_GT_0),
        ("+0", DURATION_SHOULD_BE_GT_0),
        ("-0", DURATION_SHOULD_BE_GT_0),
        ("0.0", DURATION_SHOULD_BE_INTEGER),
        ("+0.0", DURATION_SHOULD_BE_INTEGER),
        ("-0.0", DURATION_SHOULD_BE_INTEGER),
        ("990", 990),
        ("999", DURATION_SHOULD_BE_A_MULTIPLE_OF_N),
        ("1000", DURATION_SHOULD_BE_LTE_MAX_DURATION),
        ("1500", DURATION_SHOULD_BE_LTE_MAX_DURATION),
        ("1050.5", DURATION_SHOULD_BE_INTEGER),
        ("1", DURATION_SHOULD_BE_A_MULTIPLE_OF_N),
        ("99", DURATION_SHOULD_BE_A_MULTIPLE_OF_N),
        ("1.001", DURATION_SHOULD_BE_INTEGER),
        ("1.1", DURATION_SHOULD_BE_INTEGER),
        ("1,011", DURATION_SHOULD_BE_INTEGER),
        ("99.999", DURATION_SHOULD_BE_INTEGER),
        ("2.1250000000000000000", DURATION_SHOULD_BE_INTEGER),
        ("    2    ", DURATION_SHOULD_BE_A_MULTIPLE_OF_N),
        ("\t  2.012\n   ", DURATION_SHOULD_BE_INTEGER),
        ("+30", 30),
        ("-30", DURATION_SHOULD_BE_GT_0),
        ("-1", DURATION_SHOULD_BE_GT_0),
        ("+2.1250000000000000000", DURATION_SHOULD_BE_INTEGER),
        ("    +2.012    ", DURATION_SHOULD_BE_INTEGER),
        ("+2,5", DURATION_SHOULD_BE_INTEGER),
        ("+1", DURATION_SHOULD_BE_A_MULTIPLE_OF_N),
        ("+1.0", DURATION_SHOULD_BE_INTEGER),
        ("-2.1250000000000000000", DURATION_SHOULD_BE_INTEGER),
        ("-    2.012    ", DURATION_SHOULD_BE_INTEGER),
        ("    -2.012    ", DURATION_SHOULD_BE_INTEGER),
        ("    2.012-    ", DURATION_SHOULD_BE_INTEGER),
        ("    2.012    -", DURATION_SHOULD_BE_INTEGER),
        ("2-", DURATION_SHOULD_BE_INTEGER),
        ("-2-", DURATION_SHOULD_BE_INTEGER),
        ("2.-", DURATION_SHOULD_BE_INTEGER),
        ("2+", DURATION_SHOULD_BE_INTEGER),
        ("+2+", DURATION_SHOULD_BE_INTEGER),
        ("9+9", DURATION_SHOULD_BE_INTEGER),
        ("1.+05", DURATION_SHOULD_BE_INTEGER),
        ("+2.+1250000000000000000", DURATION_SHOULD_BE_INTEGER),
        ("2.125000000000+0000000", DURATION_SHOULD_BE_INTEGER),
        ("2.1250000000000000000+", DURATION_SHOULD_BE_INTEGER),
        ("+    2.012    ", DURATION_SHOULD_BE_INTEGER),
        ("    2.012+    ", DURATION_SHOULD_BE_INTEGER),
        ("    2.012    +", DURATION_SHOULD_BE_INTEGER),
        ("2+", DURATION_SHOULD_BE_INTEGER),
        ("+2+", DURATION_SHOULD_BE_INTEGER),
        ("2.+", DURATION_SHOULD_BE_INTEGER),
        ("+2-", DURATION_SHOULD_BE_INTEGER),
        ("-2+", DURATION_SHOULD_BE_INTEGER),
        ("-2,5", DURATION_SHOULD_BE_INTEGER),
        ("02.5", WRONG_FORMAT),
        ("002.01250000000000000000", WRONG_FORMAT),
        ("2.5-3.1", DURATION_SHOULD_BE_INTEGER),
        ("2.52.5", DURATION_SHOULD_BE_INTEGER),
        ("2,52,5", DURATION_SHOULD_BE_INTEGER),
        ("2.52,5", DURATION_SHOULD_BE_INTEGER),
        ("2.2 5", DURATION_SHOULD_BE_INTEGER),
        ("2 2.5", DURATION_SHOULD_BE_INTEGER),
        ("2,2 5", DURATION_SHOULD_BE_INTEGER),
        ("2 2,5", DURATION_SHOULD_BE_INTEGER),
        ("2.2,5", DURATION_SHOULD_BE_INTEGER),
        (">2", DURATION_SHOULD_BE_INTEGER),
        ("> 2", DURATION_SHOULD_BE_INTEGER),
        ("<2", DURATION_SHOULD_BE_INTEGER),
        ("<= 2", DURATION_SHOULD_BE_INTEGER),
        ("больше 2.5", DURATION_SHOULD_BE_INTEGER),
        ("aaa", DURATION_SHOULD_BE_INTEGER),
        ("a" * 10, DURATION_SHOULD_BE_INTEGER),
        ("2" * 10, DURATION_SHOULD_BE_LTE_MAX_DURATION),
        ("2" * 10 + "." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("0" + "." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("2..", DURATION_SHOULD_BE_INTEGER),
        ("2e+05", WRONG_FORMAT),
        ("2E+5", WRONG_FORMAT),
        ("2e5", WRONG_FORMAT),
        ("2E-03", WRONG_FORMAT),
        ("2e-3", WRONG_FORMAT),
        ("200.2E-3", WRONG_FORMAT),
        ("200.2e+3", WRONG_FORMAT),
        ("-2.0125", DURATION_SHOULD_BE_INTEGER),
        ("2.0125-", DURATION_SHOULD_BE_INTEGER),
        ("2,0125+", DURATION_SHOULD_BE_INTEGER),
        ("-02.5", WRONG_FORMAT),
        ("02.5-", WRONG_FORMAT),
        ("+02.5", WRONG_FORMAT),
        ("02.5+", WRONG_FORMAT),
        ("-002.01250000000000000000", WRONG_FORMAT),
        ("+002.01250000000000000000", WRONG_FORMAT),
        ("002.01250000000000000000-", WRONG_FORMAT),
        ("002.01250000000000000000+", WRONG_FORMAT),
        ("-2.5-3.1", DURATION_SHOULD_BE_INTEGER),
        ("+2.5-3.1", DURATION_SHOULD_BE_INTEGER),
        ("2.5+3.1", DURATION_SHOULD_BE_INTEGER),
        ("-2.52.5", DURATION_SHOULD_BE_INTEGER),
        ("2,52,5-", DURATION_SHOULD_BE_INTEGER),
        ("+2.52,5", DURATION_SHOULD_BE_INTEGER),
        ("2.52,5+", DURATION_SHOULD_BE_INTEGER),
        ("-2.2 5", DURATION_SHOULD_BE_INTEGER),
        ("2 2.5-", DURATION_SHOULD_BE_INTEGER),
        ("+2,2 5", DURATION_SHOULD_BE_INTEGER),
        ("2 2,5+", DURATION_SHOULD_BE_INTEGER),
        ("-" + "2" * 10, DURATION_SHOULD_BE_GT_0),
        ("2" * 10 + "-", DURATION_SHOULD_BE_INTEGER),
        ("+" + "2" * 10, DURATION_SHOULD_BE_LTE_MAX_DURATION),
        ("2" * 10 + "+", DURATION_SHOULD_BE_INTEGER),
        ("-" + "2" * 10 + "." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("2" * 10 + "." + "2" * 10 + "-", DURATION_SHOULD_BE_INTEGER),
        ("+" + "2" * 10 + "." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("2" * 10 + "." + "2" * 10 + "+", DURATION_SHOULD_BE_INTEGER),
        ("-0" + "." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("0" + "." + "2" * 10 + "-", DURATION_SHOULD_BE_INTEGER),
        ("+0" + "." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("0" + "." + "2" * 10 + "+", DURATION_SHOULD_BE_INTEGER),
        ("-2..", DURATION_SHOULD_BE_INTEGER),
        ("2..-", DURATION_SHOULD_BE_INTEGER),
        ("2.-.", DURATION_SHOULD_BE_INTEGER),
        ("+2..", DURATION_SHOULD_BE_INTEGER),
        ("2..+", DURATION_SHOULD_BE_INTEGER),
        ("2.+.", DURATION_SHOULD_BE_INTEGER),
        (".5-", DURATION_SHOULD_BE_INTEGER),
        (".5+", DURATION_SHOULD_BE_INTEGER),
        ("-2e+05", WRONG_FORMAT),
        ("2E+5-", WRONG_FORMAT),
        ("+2e5", WRONG_FORMAT),
        ("2e5+", WRONG_FORMAT),
        ("-2E-03", WRONG_FORMAT),
        ("2e-3-", WRONG_FORMAT),
        ("+200.2E-3", WRONG_FORMAT),
        ("200.2e+3+", WRONG_FORMAT),
        ("-0." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("0." + "2" * 10 + "-", DURATION_SHOULD_BE_INTEGER),
        ("+0." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("0." + "2" * 10 + "+", DURATION_SHOULD_BE_INTEGER),
        ("-" + "2" * 10, DURATION_SHOULD_BE_GT_0),
        ("2" * 10 + "-", DURATION_SHOULD_BE_INTEGER),
        ("+" + "2" * 10, DURATION_SHOULD_BE_LTE_MAX_DURATION),
        ("2" * 10 + "+", DURATION_SHOULD_BE_INTEGER),
        ("-" + "2" * 10 + "." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("2" * 10 + ".-" + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("2" * 10 + "." + "2" * 10 + "-", DURATION_SHOULD_BE_INTEGER),
        ("+" + "2" * 10 + "." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("2" * 10 + ".+" + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("2" * 10 + "." + "2" * 10 + "+", DURATION_SHOULD_BE_INTEGER),
        ("2" * 10, DURATION_SHOULD_BE_LTE_MAX_DURATION),
        ("2" * 10 + "." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("-200.2e+" + "3" * 10, WRONG_FORMAT),
        ("200.2e+" + "3" * 10 + "-", WRONG_FORMAT),
        ("+200.2e+" + "3" * 10, WRONG_FORMAT),
        ("200.2e+" + "3" * 10 + "+", WRONG_FORMAT),
        ("-0." + "2" * 10 + "e+05", WRONG_FORMAT),
        ("0." + "2" * 10 + "e+05-", WRONG_FORMAT),
        ("+0." + "2" * 10 + "e+05", WRONG_FORMAT),
        ("0." + "2" * 10 + "e+05+", WRONG_FORMAT),
        ("-" + "2" * 10 + "E+5", WRONG_FORMAT),
        ("2" * 10 + "E+5-", WRONG_FORMAT),
        ("+" + "2" * 10 + "E+5", WRONG_FORMAT),
        ("2" * 10 + "E+5+", WRONG_FORMAT),
        ("-2." + "2" * 10 + "E-03", WRONG_FORMAT),
        ("2." + "2" * 10 + "E-03-", WRONG_FORMAT),
        ("+2." + "2" * 10 + "E-03", WRONG_FORMAT),
        ("2." + "2" * 10 + "E-03+", WRONG_FORMAT),
        ("-" + "2" * 10 + "." + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2" * 10 + ".-" + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2" * 10 + "." + "2" * 10 + "e-3-", WRONG_FORMAT),
        ("+" + "2" * 10 + "." + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2" * 10 + "+." + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2" * 10 + "." + "2" * 10 + "e-3+", WRONG_FORMAT),
        ("200.2e+" + "3" * 10, WRONG_FORMAT),
        ("0." + "2" * 10 + "e+05", WRONG_FORMAT),
        ("2" * 10 + "E+5", WRONG_FORMAT),
        ("2." + "2" * 10 + "E-03", WRONG_FORMAT),
        ("2" * 10 + "." + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2.", WRONG_FORMAT),
        ("0." + "2" * 10, DURATION_SHOULD_BE_INTEGER),
        ("+2.", WRONG_FORMAT),
        ("2,", WRONG_FORMAT),
        ("+2,", WRONG_FORMAT),
        ("-2.", WRONG_FORMAT),
        (".5", WRONG_FORMAT),
        ("-.5", WRONG_FORMAT),
        ("+.5", WRONG_FORMAT),
    ],
)
def test_validate_service_duration(user_input, expected_result):
    assert validate_service_duration(user_input) == expected_result


PRICE_SHOULD_BE_INTEGER = "Цена должна быть целым числом"
PRICE_SHOULD_BE_GT_0 = "Цена должна быть больше 0"
PRICE_SHOULD_BE_LTE_MAX_PRICE = "Цена должна быть менее 1000000 рублей"


@pytest.mark.parametrize(
    "user_input,expected_result",
    [
        ("30", 30),
        ("120", 120),
        ("    30    ", 30),
        ("\t    120\n", 120),
        ("0", PRICE_SHOULD_BE_GT_0),
        ("+0", PRICE_SHOULD_BE_GT_0),
        ("-0", PRICE_SHOULD_BE_GT_0),
        ("0.0", PRICE_SHOULD_BE_INTEGER),
        ("+0.0", PRICE_SHOULD_BE_INTEGER),
        ("-0.0", PRICE_SHOULD_BE_INTEGER),
        ("1", 1),
        ("500000", 500000),
        ("999999", 999999),
        ("1000000", PRICE_SHOULD_BE_LTE_MAX_PRICE),
        ("1000001", PRICE_SHOULD_BE_LTE_MAX_PRICE),
        ("1500000", PRICE_SHOULD_BE_LTE_MAX_PRICE),
        ("1050.5", PRICE_SHOULD_BE_INTEGER),
        ("1.001", PRICE_SHOULD_BE_INTEGER),
        ("1.1", PRICE_SHOULD_BE_INTEGER),
        ("1,011", PRICE_SHOULD_BE_INTEGER),
        ("99.999", PRICE_SHOULD_BE_INTEGER),
        ("2.1250000000000000000", PRICE_SHOULD_BE_INTEGER),
        ("\t  2.012\n   ", PRICE_SHOULD_BE_INTEGER),
        ("+30", 30),
        ("-30", PRICE_SHOULD_BE_GT_0),
        ("-1", PRICE_SHOULD_BE_GT_0),
        ("+2.1250000000000000000", PRICE_SHOULD_BE_INTEGER),
        ("    +2.012    ", PRICE_SHOULD_BE_INTEGER),
        ("+2,5", PRICE_SHOULD_BE_INTEGER),
        ("+1.0", PRICE_SHOULD_BE_INTEGER),
        ("-2.1250000000000000000", PRICE_SHOULD_BE_INTEGER),
        ("-    2.012    ", PRICE_SHOULD_BE_INTEGER),
        ("    -2.012    ", PRICE_SHOULD_BE_INTEGER),
        ("    2.012-    ", PRICE_SHOULD_BE_INTEGER),
        ("    2.012    -", PRICE_SHOULD_BE_INTEGER),
        ("2-", PRICE_SHOULD_BE_INTEGER),
        ("-2-", PRICE_SHOULD_BE_INTEGER),
        ("2.-", PRICE_SHOULD_BE_INTEGER),
        ("2+", PRICE_SHOULD_BE_INTEGER),
        ("+2+", PRICE_SHOULD_BE_INTEGER),
        ("9+9", PRICE_SHOULD_BE_INTEGER),
        ("1.+05", PRICE_SHOULD_BE_INTEGER),
        ("+2.+1250000000000000000", PRICE_SHOULD_BE_INTEGER),
        ("2.125000000000+0000000", PRICE_SHOULD_BE_INTEGER),
        ("2.1250000000000000000+", PRICE_SHOULD_BE_INTEGER),
        ("+    2.012    ", PRICE_SHOULD_BE_INTEGER),
        ("    2.012+    ", PRICE_SHOULD_BE_INTEGER),
        ("    2.012    +", PRICE_SHOULD_BE_INTEGER),
        ("2+", PRICE_SHOULD_BE_INTEGER),
        ("+2+", PRICE_SHOULD_BE_INTEGER),
        ("2.+", PRICE_SHOULD_BE_INTEGER),
        ("+2-", PRICE_SHOULD_BE_INTEGER),
        ("-2+", PRICE_SHOULD_BE_INTEGER),
        ("-2,5", PRICE_SHOULD_BE_INTEGER),
        ("02.5", WRONG_FORMAT),
        ("002.01250000000000000000", WRONG_FORMAT),
        ("2.5-3.1", PRICE_SHOULD_BE_INTEGER),
        ("2.52.5", PRICE_SHOULD_BE_INTEGER),
        ("2,52,5", PRICE_SHOULD_BE_INTEGER),
        ("2.52,5", PRICE_SHOULD_BE_INTEGER),
        ("2.2 5", PRICE_SHOULD_BE_INTEGER),
        ("2 2.5", PRICE_SHOULD_BE_INTEGER),
        ("2,2 5", PRICE_SHOULD_BE_INTEGER),
        ("2 2,5", PRICE_SHOULD_BE_INTEGER),
        ("2.2,5", PRICE_SHOULD_BE_INTEGER),
        (">2", PRICE_SHOULD_BE_INTEGER),
        ("> 2", PRICE_SHOULD_BE_INTEGER),
        ("<2", PRICE_SHOULD_BE_INTEGER),
        ("<= 2", PRICE_SHOULD_BE_INTEGER),
        ("больше 2.5", PRICE_SHOULD_BE_INTEGER),
        ("aaa", PRICE_SHOULD_BE_INTEGER),
        ("a" * 10, PRICE_SHOULD_BE_INTEGER),
        ("2" * 10, PRICE_SHOULD_BE_LTE_MAX_PRICE),
        ("2" * 10 + "." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("0" + "." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("2..", PRICE_SHOULD_BE_INTEGER),
        ("2e+05", WRONG_FORMAT),
        ("2E+5", WRONG_FORMAT),
        ("2e5", WRONG_FORMAT),
        ("2E-03", WRONG_FORMAT),
        ("2e-3", WRONG_FORMAT),
        ("200.2E-3", WRONG_FORMAT),
        ("200.2e+3", WRONG_FORMAT),
        ("-2.0125", PRICE_SHOULD_BE_INTEGER),
        ("2.0125-", PRICE_SHOULD_BE_INTEGER),
        ("2,0125+", PRICE_SHOULD_BE_INTEGER),
        ("-02.5", WRONG_FORMAT),
        ("02.5-", WRONG_FORMAT),
        ("+02.5", WRONG_FORMAT),
        ("02.5+", WRONG_FORMAT),
        ("-002.01250000000000000000", WRONG_FORMAT),
        ("+002.01250000000000000000", WRONG_FORMAT),
        ("002.01250000000000000000-", WRONG_FORMAT),
        ("002.01250000000000000000+", WRONG_FORMAT),
        ("-2.5-3.1", PRICE_SHOULD_BE_INTEGER),
        ("+2.5-3.1", PRICE_SHOULD_BE_INTEGER),
        ("2.5+3.1", PRICE_SHOULD_BE_INTEGER),
        ("-2.52.5", PRICE_SHOULD_BE_INTEGER),
        ("2,52,5-", PRICE_SHOULD_BE_INTEGER),
        ("+2.52,5", PRICE_SHOULD_BE_INTEGER),
        ("2.52,5+", PRICE_SHOULD_BE_INTEGER),
        ("-2.2 5", PRICE_SHOULD_BE_INTEGER),
        ("2 2.5-", PRICE_SHOULD_BE_INTEGER),
        ("+2,2 5", PRICE_SHOULD_BE_INTEGER),
        ("2 2,5+", PRICE_SHOULD_BE_INTEGER),
        ("-" + "2" * 10, PRICE_SHOULD_BE_GT_0),
        ("2" * 10 + "-", PRICE_SHOULD_BE_INTEGER),
        ("+" + "2" * 10, PRICE_SHOULD_BE_LTE_MAX_PRICE),
        ("2" * 10 + "+", PRICE_SHOULD_BE_INTEGER),
        ("-" + "2" * 10 + "." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("2" * 10 + "." + "2" * 10 + "-", PRICE_SHOULD_BE_INTEGER),
        ("+" + "2" * 10 + "." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("2" * 10 + "." + "2" * 10 + "+", PRICE_SHOULD_BE_INTEGER),
        ("-0" + "." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("0" + "." + "2" * 10 + "-", PRICE_SHOULD_BE_INTEGER),
        ("+0" + "." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("0" + "." + "2" * 10 + "+", PRICE_SHOULD_BE_INTEGER),
        ("-2..", PRICE_SHOULD_BE_INTEGER),
        ("2..-", PRICE_SHOULD_BE_INTEGER),
        ("2.-.", PRICE_SHOULD_BE_INTEGER),
        ("+2..", PRICE_SHOULD_BE_INTEGER),
        ("2..+", PRICE_SHOULD_BE_INTEGER),
        ("2.+.", PRICE_SHOULD_BE_INTEGER),
        (".5-", PRICE_SHOULD_BE_INTEGER),
        (".5+", PRICE_SHOULD_BE_INTEGER),
        ("-2e+05", WRONG_FORMAT),
        ("2E+5-", WRONG_FORMAT),
        ("+2e5", WRONG_FORMAT),
        ("2e5+", WRONG_FORMAT),
        ("-2E-03", WRONG_FORMAT),
        ("2e-3-", WRONG_FORMAT),
        ("+200.2E-3", WRONG_FORMAT),
        ("200.2e+3+", WRONG_FORMAT),
        ("-0." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("0." + "2" * 10 + "-", PRICE_SHOULD_BE_INTEGER),
        ("+0." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("0." + "2" * 10 + "+", PRICE_SHOULD_BE_INTEGER),
        ("-" + "2" * 10, PRICE_SHOULD_BE_GT_0),
        ("2" * 10 + "-", PRICE_SHOULD_BE_INTEGER),
        ("+" + "2" * 10, PRICE_SHOULD_BE_LTE_MAX_PRICE),
        ("2" * 10 + "+", PRICE_SHOULD_BE_INTEGER),
        ("-" + "2" * 10 + "." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("2" * 10 + ".-" + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("2" * 10 + "." + "2" * 10 + "-", PRICE_SHOULD_BE_INTEGER),
        ("+" + "2" * 10 + "." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("2" * 10 + ".+" + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("2" * 10 + "." + "2" * 10 + "+", PRICE_SHOULD_BE_INTEGER),
        ("2" * 10, PRICE_SHOULD_BE_LTE_MAX_PRICE),
        ("2" * 10 + "." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("-200.2e+" + "3" * 10, WRONG_FORMAT),
        ("200.2e+" + "3" * 10 + "-", WRONG_FORMAT),
        ("+200.2e+" + "3" * 10, WRONG_FORMAT),
        ("200.2e+" + "3" * 10 + "+", WRONG_FORMAT),
        ("-0." + "2" * 10 + "e+05", WRONG_FORMAT),
        ("0." + "2" * 10 + "e+05-", WRONG_FORMAT),
        ("+0." + "2" * 10 + "e+05", WRONG_FORMAT),
        ("0." + "2" * 10 + "e+05+", WRONG_FORMAT),
        ("-" + "2" * 10 + "E+5", WRONG_FORMAT),
        ("2" * 10 + "E+5-", WRONG_FORMAT),
        ("+" + "2" * 10 + "E+5", WRONG_FORMAT),
        ("2" * 10 + "E+5+", WRONG_FORMAT),
        ("-2." + "2" * 10 + "E-03", WRONG_FORMAT),
        ("2." + "2" * 10 + "E-03-", WRONG_FORMAT),
        ("+2." + "2" * 10 + "E-03", WRONG_FORMAT),
        ("2." + "2" * 10 + "E-03+", WRONG_FORMAT),
        ("-" + "2" * 10 + "." + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2" * 10 + ".-" + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2" * 10 + "." + "2" * 10 + "e-3-", WRONG_FORMAT),
        ("+" + "2" * 10 + "." + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2" * 10 + "+." + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2" * 10 + "." + "2" * 10 + "e-3+", WRONG_FORMAT),
        ("200.2e+" + "3" * 10, WRONG_FORMAT),
        ("0." + "2" * 10 + "e+05", WRONG_FORMAT),
        ("2" * 10 + "E+5", WRONG_FORMAT),
        ("2." + "2" * 10 + "E-03", WRONG_FORMAT),
        ("2" * 10 + "." + "2" * 10 + "e-3", WRONG_FORMAT),
        ("2.", WRONG_FORMAT),
        ("0." + "2" * 10, PRICE_SHOULD_BE_INTEGER),
        ("+2.", WRONG_FORMAT),
        ("2,", WRONG_FORMAT),
        ("+2,", WRONG_FORMAT),
        ("-2.", WRONG_FORMAT),
        (".5", WRONG_FORMAT),
        ("-.5", WRONG_FORMAT),
        ("+.5", WRONG_FORMAT),
    ],
)
def test_validate_service_price(user_input, expected_result):
    assert validate_service_price(user_input) == expected_result
